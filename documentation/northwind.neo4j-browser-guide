= Northwind Graph
:img: img

== Northwind Graph

From RDBMS to Graph, using a classic dataset

The _Northwind Graph_ demonstrates how to migrate from a relational database to Neo4j. The transformation is iterative and deliberate, emphasizing the conceptual shift from relational tables to the nodes and relationships of a graph.

This guide will show you how to:

* Load: create data from external CSV files
* Index: index nodes based on label
* Relate: transform foreign key references into data relationships
* Promote: transform join records into relationships

---

== Product Catalog

[.float-group]
--
[.left]
image::{img}/product-category-supplier.png[]

Northwind sells food products in a few categories, provided by suppliers. Let's start by loading the product catalog tables.

The load statements to the right require public internet access. `LOAD CSV` will retrieve a CSV file from a valid URL, applying a Cypher statement to each row using a named map (here we're using the name `row`).

pass:[help <a help-topic="cypher">cypher</a> <a help-topic="load-csv">LOAD CSV</a>]
--

=== Load records

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/products.csv" AS row
CREATE (n:Product)
SET n = row,
n.unitPrice = toFloat(row.unitPrice),
n.unitsInStock = toInteger(row.unitsInStock), n.unitsOnOrder = toInteger(row.unitsOnOrder),
n.reorderLevel = toInteger(row.reorderLevel), n.discontinued = (row.discontinued <> "0");
----

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/categories.csv" AS row
CREATE (n:Category)
SET n = row;
----

[source,cypher]
----
 LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/suppliers.csv" AS row
 CREATE (n:Supplier)
 SET n = row;
----

[source,cypher]
----
CREATE INDEX ON :Product(productID);
CREATE INDEX ON :Category(categoryID);
CREATE INDEX ON :Supplier(supplierID);
----

---

== Product Catalog Graph

[.left]
image::{img}/product-graph.png[]

The products, categories and suppliers are related through foreign key references. Let's promote those to data relationships to realize the graph.

pass:[help <a help-topic="cypher">cypher</a> <a help-topic="match">MATCH</a>]

=== Create data relationships

Calculate join, materialize relationship.
See the http://neo4j.com/developer/guide-importing-data-and-etl[importing guide^] for more details. 

WARNING: Note you only need to compare property values like this when first creating relationships

[source,cypher]
----
MATCH (p:Product),(c:Category)
WHERE p.categoryID = c.categoryID
CREATE (p)-[:PART_OF]->(c);
----

[source,cypher]
----
MATCH (p:Product),(s:Supplier)
WHERE p.supplierID = s.supplierID
CREATE (s)-[:SUPPLIES]->(p);
----

== Querying Product Catalog Graph

[.left]
image::{img}/product-graph.png[]
Let's try some queries using patterns.

pass:[help <a help-topic="cypher">cypher</a> <a help-topic="match">MATCH</a>]

=== Query using patterns

List the product categories provided by each supplier:

[source,cypher]
----
MATCH (s:Supplier)-->(:Product)-->(c:Category)
RETURN s.companyName as Company, collect(distinct c.categoryName) as Categories;
----

Find the produce suppliers:

[source,cypher]
----
MATCH (c:Category {categoryName:"Produce"})<--(:Product)<--(s:Supplier)
RETURN DISTINCT s.companyName as ProduceSuppliers;
----

== Customer Orders

[.left]
image::{img}/customer-orders.png[]

Northwind customers place orders which may detail multiple products.

pass:[help <a help-topic="cypher">cypher</a> <a help-topic="load-csv">LOAD CSV</a>]

=== Load and index records

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/customers.csv" AS row
CREATE (n:Customer)
SET n = row;
----

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/orders.csv" AS row
CREATE (n:Order)
SET n = row;
----

[source,cypher]
----
CREATE INDEX ON :Customer(customerID);
CREATE INDEX ON :Order(orderID);
----

=== Create data relationships

WARNING: Note you only need to compare property values like this when first creating relationships

[source,cypher]
----
MATCH (c:Customer),(o:Order)
WHERE c.customerID = o.customerID
CREATE (c)-[:PURCHASED]->(o);
----

== Customer Order Graph

[.float-group]
--
[.left]
image::{img}/order-graph.png[]

Notice that Order Details are always part of an Order and that they{' '} _relate_ the Order to a Product â€” they're a join table. Join tables are always a sign of a data relationship, indicating shared information between two other records.

Here, we'll directly promote each OrderDetail record into a relationship in the graph.
--

pass:[help <a help-topic="cypher">cypher</a> <a help-topic="load-csv">LOAD CSV</a>]

=== Load and index records

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "https://data.neo4j.com/northwind/order-details.csv" AS row
MATCH (p:Product), (o:Order)
WHERE p.productID = row.productID AND o.orderID = row.orderID
CREATE (o)-[details:ORDERS]->(p)
SET details = row, details.quantity = toInteger(row.quantity);
----

WARNING: Note you only need to compare property values like this when first creating relationships

=== Query using patterns

[source,cypher]
----
MATCH (cust:Customer)-[:PURCHASED]->(:Order)-[o:ORDERS]->(p:Product),
      (p)-[:PART_OF]->(c:Category {categoryName:"Produce"})
RETURN DISTINCT cust.contactName as CustomerName, SUM(o.quantity) AS TotalProductsPurchased;
----

== Next steps

=== More code

* pass:a[<a play-topic="movie-graph">Movie Graph</a> - actors & movies]
* pass:a[<a play-topic="cypher">Cypher</a> - query language fundamentals]

=== References

* https://neo4j.com/developer/guide-importing-data-and-etl/[Full Northwind import example^]
* https://neo4j.com/developer/[Developer resources^]
* https://neo4j.com/docs/cypher-manual[Neo4j Cypher Manual^]
